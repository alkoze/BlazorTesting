@page "/publisherView"
@inject HttpClient Http
@inject Test.Shared.StateContainer StateContainer
@inject NavigationManager NavigationManager
@implements IDisposable

<h1>Hello, world!</h1>
<table class="table">

    <tbody>
        @if (StateContainer.publishers != null && StateContainer.publishers.Count != 0)
        {
        <tr>
            <th>Publisher Name</th>
            <th>PublisherId</th>
            <th>Year Founded</th>
            <th>Year Closed</th>
        </tr>
        }
        @foreach (var publisher in StateContainer.publishers)
        {
            <tr>
                <td>@publisher.PublisherName </td>
                <td>@publisher.PublisherId </td>
                <td>@publisher.YearFunded </td>
                <td>@publisher.YearClosed </td>
                <td><button @onclick="() => Details(publisher.PublisherId)">Details</button></td>
                <td><button @onclick="() => Delete(publisher.PublisherId)">Delete publisher</button></td>
            </tr>
        }
    </tbody>
</table>
<table class="table">
    <thead>
        <tr>
            <th>Publisher Name</th>
            <th>Year Founded</th>
            <th>Year closed</th>
        </tr>
    </thead>
    <tbody>
            <tr>
                <td><input placeholder="Publisher Name" @bind="publisherName" /></td>
                <td><input placeholder="Publisher Created" @bind="founded" /></td>
                <td><input placeholder="Publisher Closed" @bind="closed" /></td>
            </tr>
    </tbody>
</table>





<button @onclick="Add">Add publisher</button>

@code {
    //private List<Test.Shared.Publisher> publishers = new List<Test.Shared.Publisher>();
    private string publisherName;
    private int founded;
    private int closed;

    private void Details(Guid? id)
    {
        NavigationManager.NavigateTo("/publisherView/" + id);
    }
    /*
    private void AddPublisher()
    {
        StateContainer.publishers.Add(new Test.Shared.Publisher { PublisherName = publisherName, YearFunded = founded, YearClosed = closed, PublisherId = Guid.NewGuid(), PublisherBooks = null });
        publisherName = "";
        founded = 0;
        closed = 0;
    }

    private void DeletePublisher(Guid? id)
    {
        StateContainer.RemovePublisher(id);
    }
    */
    private async Task Add()
    {
        Test.Shared.Publisher publisher = new Test.Shared.Publisher { PublisherName = publisherName, YearFunded = founded, YearClosed = closed, PublisherId = null, PublisherBooks = null };
        await Http.PostAsJsonAsync<Test.Shared.Publisher>("publisher", publisher);
        StateContainer.publishers = await Http.GetFromJsonAsync<List<Test.Shared.Publisher>>("publisher");
        publisherName = "";
        founded = 0;
        closed = 0;
    }

    private async Task Delete(Guid? id)
    {
        await Http.DeleteAsync($"publisher/{id}");
        StateContainer.publishers = await Http.GetFromJsonAsync<List<Test.Shared.Publisher>>("publisher");
    }

    protected override async Task OnInitializedAsync()
    {
        StateContainer.publishers = await Http.GetFromJsonAsync<List<Test.Shared.Publisher>>("publisher");
        StateContainer.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}

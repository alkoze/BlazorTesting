@page "/publisherView"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inherits PublisherValidation

<h1>Hello, world!</h1>
@if (publishers != null && publishers.Count() != 0)
{
    <table class="table">

        <tbody>

            <tr>
                <th>Publisher Name</th>
                <th>PublisherId</th>
                <th>Amount of books</th>
                <th>Year Founded</th>
                <th>Year Closed</th>
            </tr>

            @foreach (var publisher in publishers)
            {
                <tr>
                    <td><NavLink class="button" href=@($"/publisherView/{publisher.PublisherId}")>@publisher.PublisherName</NavLink></td>
                    <td>@publisher.PublisherId </td>
                    <td>@publisher.PublisherBooks.Count()</td>
                    <td>@publisher.YearFunded </td>
                    <td>@publisher.YearClosed </td>
                    <td><button @onclick="() => Delete(publisher.PublisherId)">Delete publisher</button></td>
                </tr>
            }
        </tbody>
    </table>
}
<EditForm Model="_publisher" OnValidSubmit="@AddPublisher">
    <DataAnnotationsValidator />
    <CustomValidator @ref="customValidator" />
    <ValidationSummary />
    <table class="table">
        <thead>
            <tr>
                <th>Publisher Name</th>
                <th>Year Founded</th>
                <th>Year closed</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><InputText placeholder="Publisher Name" @bind-Value="_publisher.PublisherName" /></td>
                <td><InputNumber placeholder="Publisher Created" @bind-Value="_publisher.YearFunded" /></td>
                <td><InputNumber placeholder="Publisher Closed" @bind-Value="_publisher.YearClosed" /></td>
            </tr>
        </tbody>
    </table>
    <button type="submit">Add publisher</button>
</EditForm>
@code {
    private CustomValidator customValidator;

    private Test.Shared.Publisher _publisher = new Test.Shared.Publisher();

    public List<Test.Shared.Publisher> publishers = new List<Test.Shared.Publisher>();

    private async Task AddPublisher()
    {
        if (HandleValidSubmit(customValidator, _publisher))
        {
            await Http.PostAsJsonAsync<Test.Shared.Publisher>("api/publishers", _publisher);
            await OnInitializedAsync();
        }
    }

    private async Task Delete(Guid? id)
    {
        await Http.DeleteAsync($"api/publishers/{id}");
        publishers = await Http.GetFromJsonAsync<List<Test.Shared.Publisher>>("api/publishers");
    }

    protected override async Task OnInitializedAsync()
    {
        publishers = await Http.GetFromJsonAsync<List<Test.Shared.Publisher>>("api/publishers");
        _publisher = new Test.Shared.Publisher();
    }
}

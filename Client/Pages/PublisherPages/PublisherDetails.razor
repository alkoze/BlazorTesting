@page "/publisherView/{id:guid}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inherits PublisherValidation
<h3>Publisher details </h3>
@if (_publisher != null)
{
<EditForm Model="_publisher" OnValidSubmit="Edit">
    <DataAnnotationsValidator />
    <CustomValidator @ref="customValidator" />
    <ValidationSummary />
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Year Founded</th>
                <th scope="col">Year Closed</th>
                <th scope="col">Books</th>
                <th scope="col">Id</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><InputText placeholder=@_publisher.PublisherName @bind-Value="_publisher.PublisherName" /></td>
                <td><InputNumber placeholder=@_publisher.YearFunded @bind-Value="_publisher.YearFunded" /></td>
                <td><InputNumber placeholder=@_publisher.YearClosed @bind-Value="_publisher.YearClosed" /></td>
                <td>
                    @foreach (var book in _publisher.PublisherBooks)
                    {
                        <div><NavLink class="button" href=@($"/bookView/{book.BookId}")>@book.BookName</NavLink></div>
                    }
                </td>
                <td>@_publisher.PublisherId</td>
                <td><button type="submit">Edit publisher</button></td>
            </tr>
        </tbody>
    </table>
</EditForm>
}

@code {
    [Parameter]
    public Guid id { get; set; }

    private CustomValidator customValidator;

    private Test.Shared.Publisher _publisher = new Test.Shared.Publisher();

    private void BookDetails(Guid? id)
    {
        NavigationManager.NavigateTo("/bookview/" + id);
    }

    protected override async Task OnInitializedAsync()
    {
        _publisher = await Http.GetFromJsonAsync<Test.Shared.Publisher>($"api/publishers/{id}");
    }

    private async Task Edit()
    {
        if (HandleValidSubmit(customValidator, _publisher))
        {
            await Http.PutAsJsonAsync<Test.Shared.Publisher>($"api/publishers/{id}", _publisher);
            await OnInitializedAsync();
        }
    }
}

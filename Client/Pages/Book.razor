@page "/bookView"
<h3>Book</h3>
@inject HttpClient Http
@inject Test.Shared.StateContainer StateContainer
@implements IDisposable

<h1>Hello, world!</h1>
<table class="table">

    <tbody>
        @foreach (var book in StateContainer.books)
        {
            <tr>
                <td><input placeholder=@book.BookName @bind="book.BookName" /></td>
                <td>@book.BookId </td>
                <td>@book.BookPublisher.PublisherName</td>
                <td><button @onclick="() => DeletePublisher(book.BookId)">Delete publisher</button></td>
            </tr>
        }
    </tbody>
</table>
<input placeholder="Book Name" @bind="bookName" />
<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Dropdown button
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @foreach (var publisher in StateContainer.publishers)
        {
        <a class="dropdown-item" href="#">@publisher.PublisherName</a>
        }
    </div>
</div>

<button @onclick="AddBook">Add book</button>

@code {
    private List<Test.Shared.Publisher> publishers = new List<Test.Shared.Publisher>();
    private string bookName;
    //private Publisher publisher;

    private void AddBook()
    {
        StateContainer.books.Add(new Test.Shared.Book{BookName= bookName, BookId = Guid.NewGuid(), BookPublisher = null });
    }
    private void DeletePublisher(Guid? id)
    {
        StateContainer.RemovePublisher(id);
    }

    private async Task Add()
    {
    }

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}

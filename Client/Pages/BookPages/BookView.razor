@page "/bookView"
@inject HttpClient Http
@inject Test.Shared.StateContainer StateContainer
@implements IDisposable
@inject NavigationManager NavigationManager
    <div>
        <h3>Book</h3>

        <table class="table">

            <tbody>
                @if (StateContainer.books != null && StateContainer.books.Count != 0)
                {
                    <tr>
                        <th>Book Name</th>
                        <th>Book Id</th>
                        <th>Book Publisher</th>
                    </tr>
                }
                @foreach (var book in StateContainer.books)
                {
            <tr>
                <td>@book.BookName </td>
                <td>@book.BookId </td>
                <td><button @onclick="() => PublisherDetails(book.BookPublisherId)" type="button" class="btn btn-link">@book.BookPublisher.PublisherName</button></td>
                <td><button @onclick="() => Details(book.BookId)">Details</button></td>
                <td><button @onclick="() => Delete(book.BookId)">Delete book</button></td>
            </tr>
                }
            </tbody>
        </table>
        <table class="table">
            <thead>
                <tr>
                    <th>Book Name</th>
                    <th>Book Publisher</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input placeholder="Book Name" @bind="bookName" /></td>
                    <td>
                        <select @bind="publisherId" title="Publisher name">
                            @foreach(var publisher in StateContainer.publishers)
                            {
                                <option value="@publisher.PublisherId">@publisher.PublisherName</option>
                            }
                        </select>
                    </td>
                </tr>
            </tbody>
        </table>
        <button @onclick="AddBook">Add book</button>
    </div>
    @code {
        private List<Test.Shared.Publisher> publishers = new List<Test.Shared.Publisher>();
        private string bookName;
        private Guid publisherId;
        //private Publisher publisher;

        private void PublisherDetails(Guid? id)
        {
            NavigationManager.NavigateTo("/publisherView/" + id);
        }

        private void Details(Guid? id)
        {
            NavigationManager.NavigateTo("/bookview/" + id);
        }

        private async Task AddBook()
        {
            Test.Shared.Book book = new Test.Shared.Book { BookName = bookName, BookPublisherId = publisherId };
            Test.Shared.Publisher publisher = await Http.GetFromJsonAsync<Test.Shared.Publisher>($"api/publishers/{book.BookPublisherId}");
            await Http.PostAsJsonAsync<Test.Shared.Book>("api/books", book);
            StateContainer.books = await Http.GetFromJsonAsync<List<Test.Shared.Book>>("api/books");
            bookName = "";
            publisherId = new Guid();
        }
        private async Task Delete(Guid? id)
        {
            Console.WriteLine("deleting?");
            await Http.DeleteAsync($"api/books/{id}");
            StateContainer.books = await Http.GetFromJsonAsync<List<Test.Shared.Book>>("api/books");
        }

        protected override async Task OnInitializedAsync()
        {
            StateContainer.books = await Http.GetFromJsonAsync<List<Test.Shared.Book>>("api/books");
            StateContainer.OnChange += StateHasChanged;
        }

        public void Dispose()
        {
            StateContainer.OnChange -= StateHasChanged;
        }
    }

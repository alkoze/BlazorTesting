@page "/bookView/{id:guid}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>BookDetails</h3>
<div>@id</div>
@if (book != null)
{
<EditForm Model="book" OnValidSubmit="@Edit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Book Id</th>
                <th scope="col">Publisher</th>
                <th scope="col">Authors</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><InputText placeholder=@book.BookName @bind-Value="book.BookName" /></td>
                <td>@book.BookId</td>
                <td>
                    <InputSelect @bind-Value="book.BookPublisherId" title="Publisher name">
                        @foreach (var publisher in publishers)
                            {
                            <option value="@publisher.PublisherId">@publisher.PublisherName</option>
                            }
                    </InputSelect>
                </td>
                <td>Authors</td>
                <td><button type="submit">Edit book</button></td>
            </tr>
        </tbody>

    </table>
</EditForm>
}
@code {
    [Parameter]
    public Guid id { get; set; }
    public Test.Shared.Book book { get; set; } = new Test.Shared.Book();
    private List<Test.Shared.Publisher> publishers = new List<Test.Shared.Publisher>();

    private async Task Edit()
    {
        await Http.PutAsJsonAsync<Test.Shared.Book>($"api/books/{id}", book);
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        book = await Http.GetFromJsonAsync<Test.Shared.Book>($"api/books/{id}");
        publishers = await Http.GetFromJsonAsync<List<Test.Shared.Publisher>>("api/publishers");
    }
}

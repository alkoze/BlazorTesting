@page "/bookView/{id:guid}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Test.Shared.StateContainer StateContainer

<h3>BookDetails</h3>
<div>@id</div>
@if (book != null)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Book Id</th>
                <th scope="col">Publisher</th>
                <th scope="col">Authors</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input placeholder=@book.BookName @bind="nameToEdit" /></td>
                <td>@book.BookId</td>
                <td>
                    <select @bind="publisherId" title="Publisher name">
                        @foreach (var publisher in StateContainer.publishers)
                        {
                            <option value="@publisher.PublisherId">@publisher.PublisherName</option>
                        }
                    </select>
                </td>
                <td>Authors</td>
                <td><button @onclick="Edit">Edit book</button></td>
            </tr>
        </tbody>
    </table>
}
@code {
    [Parameter]
    public Guid id { get; set; }
    public Test.Shared.Book book { get; set; } = null;
    private string nameToEdit;
    private Guid publisherId;

    private async Task Edit()
    {
        book.BookName = nameToEdit;
        book.BookPublisherId = publisherId;
        await Http.PutAsJsonAsync<Test.Shared.Book>($"api/books/{id}", book);
        await OnInitializedAsync();
    }

    private void PublisherDetails(Guid id)
    {
        NavigationManager.NavigateTo("/publisherView/" + id);
    }

    protected override async Task OnInitializedAsync()
    {
        book = await Http.GetFromJsonAsync<Test.Shared.Book>($"api/books/{id}");
        nameToEdit = book.BookName;
        publisherId = book.BookPublisherId;
    }
}
